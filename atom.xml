<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coderbxd的博客</title>
  
  <subtitle>重庆移通学院 2022 软件工程</subtitle>
  <link href="http://coderbxd.top/atom.xml" rel="self"/>
  
  <link href="http://coderbxd.top/"/>
  <updated>2021-08-18T08:39:47.437Z</updated>
  <id>http://coderbxd.top/</id>
  
  <author>
    <name>bxd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端实习-萌想科技(实习僧)</title>
    <link href="http://coderbxd.top/2021/08/18/%E9%9D%A2%E7%BB%8F01-%E5%AE%9E%E4%B9%A0%E5%83%A7/"/>
    <id>http://coderbxd.top/2021/08/18/%E9%9D%A2%E7%BB%8F01-%E5%AE%9E%E4%B9%A0%E5%83%A7/</id>
    <published>2021-08-18T06:34:42.857Z</published>
    <updated>2021-08-18T08:39:47.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="只有一面"><a href="#只有一面" class="headerlink" title="只有一面"></a>只有一面</h3><ul><li>自我介绍</li><li>介绍了一下公司技术栈<ul><li>jquery+vue+其他的框架</li></ul></li><li>css水平垂直居中<ul><li>相对绝对定位（transform、margin）</li><li>flex布局</li></ul></li><li>重绘和重排</li><li>cookie和sessionstroge和localstroge的区别<ul><li>答了安全性，存储大小，有效期，存储位置（session和sessionstroge不是一个东西，让我记错了）</li><li>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效<br>localStorage：除非被手动清除，否则将会永久保存。<br>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</li><li>cookie：4KB左右<br>localStorage和sessionStorage：可以保存5MB的信息</li><li>都保存在客户端</li></ul></li><li>http状态码<ul><li>问了3XX（重定向）,没答出来</li><li>问了4XX和5XX（404找不到资源前端问题，500服务器问题后端问题）</li></ul></li><li>vue生命周期<ul><li>问了有多少个，8个</li></ul></li><li>vue加载dom在哪个生命周期中发生<ul><li>mounted</li></ul></li><li>vue父子组件通信<ul><li>props和$emit</li><li>中央事件总线</li><li>vuex</li></ul></li><li>vuex用的多吗</li><li>v-if和v-show的区别（答的不是很好）<ul><li>v-if在条件切换时，会对标签进行适当的创建和销毁，而v-show则仅在初始化时加载一次，因此v-if的开销相对来说会比v-show大。</li><li>v-if是惰性的，只有当条件为真时才会真正渲染标签；如果初始条件不为真，则v-if不会去渲染标签。v-show则无论初始条件是否成立，都会渲染标签，它仅仅做的只是简单的CSS切换。</li></ul></li><li>v-for中的id是做什么的<ul><li>没答出来</li></ul></li><li>vue路由有几种<ul><li>3种，说了下hash、history</li></ul></li><li>是否了解git</li><li>原生js做轮播图的思路<ul><li>简单说了一下，写的话应该就不会写了</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;只有一面&quot;&gt;&lt;a href=&quot;#只有一面&quot; class=&quot;headerlink&quot; title=&quot;只有一面&quot;&gt;&lt;/a&gt;只有一面&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;介绍了一下公司技术栈&lt;ul&gt;
&lt;li&gt;jquery+vue+其他的框架&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="面经" scheme="http://coderbxd.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>=== 和 == 的区别</title>
    <link href="http://coderbxd.top/2021/07/07/js06-===%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://coderbxd.top/2021/07/07/js06-===%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-07-07T08:12:55.954Z</published>
    <updated>2021-07-07T08:15:22.787Z</updated>
    
    <content type="html"><![CDATA[<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>=== ：三个等号我们称为等同符，当等号两边的值为相同类型的时候，直接比较等号两边<br>的值，值相同则返回 true，若等号两边的值类型不同时直接返回 false。也就是说三个等号<br>既要判断值也要判断类型是否相等</p></li><li><p>==：两个等号我们称为等值符，当等号两边的值为相同类型时比较值是否相同，类型不同<br>时会发生类型的自动转换，转换为相同的类型后再作比较。也就是说两个等号只要值相等<br>就可以</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;=== ：三个等号我们称为等同符，当等号两边的值为相同类型的时候，直接比较等号两边&lt;br&gt;的值，值相同则返回 true，若</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内置对象和方法</title>
    <link href="http://coderbxd.top/2021/07/07/js05-js%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>http://coderbxd.top/2021/07/07/js05-js%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-07T07:49:59.533Z</published>
    <updated>2021-07-07T08:12:35.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象及方法"><a href="#对象及方法" class="headerlink" title="对象及方法"></a>对象及方法</h3><p>Arguments 函数参数集合<br>Arguments[ ] 函数参数的数组<br>Arguments 一个函数的参数和其他属性<br>Arguments.callee 当前正在运行的函数<br>Arguments.length 传递给函数的参数的个数</p><h3 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h3><p>ength 属性 动态获取数组长度<br>join() 将一个数组转成字符串。返回一个字符串。<br>reverse() 将数组中各元素颠倒顺序<br>delete 运算符 只能删除数组元素的值，而所占空间还在，总长度没变(arr.length)。<br>shift() 删除数组中第一个元素，返回删除的那个值，并将长度减 1。<br>pop() 删除数组中最后一个元素，返回删除的那个值，并将长度减 1。<br>unshift() 往数组前面添加一个或多个数组元素，长度要改变。arrObj.unshift(“a” ，“b，“c”)<br>push() 往数组结尾添加一个或多个数组元素，长度要改变。arrObj.push(“a” ，“b”，“c”)<br>concat() 连接数组<br>slice() 返回数组的一部分<br>sort() 对数组元素进行排序<br>splice() 插入、删除或替换数组的元素<br>toLocaleString() 把数组转换成局部字符串<br>toString() 将数组转换成一个字符串<br>forEach() 遍历所有元素<br>every() 判断所有元素是否都符合条件<br>map() 对元素进行重新组装，生成新的元素</p><h3 id="string-字符串对象"><a href="#string-字符串对象" class="headerlink" title="string 字符串对象"></a>string 字符串对象</h3><p>Length 获取字符串的长度。如：var len = strObj.length<br>toLowerCase() 将字符串中的字母转成全小写。如：strObj.toLowerCase()<br>toUpperCase() 将字符串中的字母转成全大写。如：strObj.toUpperCase()<br>charAt(index) 返回指定下标位置的一个字符。如果没有找到，则返回空字符串<br>substr() 在原始字符串，返回一个子字符串<br>substring() 在原始字符串，返回一个子字符串<br>  区别：’’’<br>    “abcdefgh”.substring(2，3) = “c”<br>    “abcdefgh”.substr(2，3) = “cde”<br>split() 将一个字符串转成数组<br>charCodeAt( ) 返回字符串中的第 n 个字符的代码<br>concat( ) 连接字符串<br>fromCharCode( ) 从字符编码创建—个字符串<br>indexOf( ) 返回一个子字符串在原始字符串中的索引值(查找顺序从左往右查找)。如果没<br>有找到，则返回-1<br>lastIndexOf( ) 从后向前检索一个字符串<br>localeCompare( ) 用本地特定的顺序来比较两个字符串<br>match( ) 找到一个或多个正则表达式的匹配<br>replace( ) 替换一个与正则表达式匹配的子串<br>search( ) 检索与正则表达式相匹配的子串<br>slice( ) 抽取一个子串<br>toLocaleLowerCase( ) 把字符串转换小写<br>toLocaleUpperCase( ) 将字符串转换成大写<br>toLowerCase( ) 将字符串转换成小写<br>toString( ) 返回字符串<br>toUpperCase( ) 将字符串转换成大写<br>valueOf( )</p><h3 id="Boolean-布尔对象方法"><a href="#Boolean-布尔对象方法" class="headerlink" title="Boolean 布尔对象方法"></a>Boolean 布尔对象方法</h3><p>Boolean.toString( ) 将布尔值转换成字符串<br>Boolean.valueOf( ) Boolean 对象的布尔值</p><h3 id="Date-日期时间"><a href="#Date-日期时间" class="headerlink" title="Date 日期时间"></a>Date 日期时间</h3><ul><li>创建 Date 对象的方法</li></ul><ul><li>创建当前(现在)日期对象的实例，不带任何参数<br>var today = new Date()；</li><li>创建指定时间戳的日期对象实例，参数是时间戳。<br>时间戳：是指某一个时间距离 1970 年 1 月 1 日 0 时 0 分 0 秒，过去了多少毫秒值(1<br>秒=1000 毫秒)<br>var timer = new Date(10000)； //时间是 1970 年 1 月 1 日 0 时 0 分 10 秒</li><li>指定一个字符串的日期时间信息，参数是一个日期时间字符串<br>var timer = new Date(“2015/5/25 10：00：00”)；</li><li>指定多个数值参数<br>var timer = new Date(2015+100，4，25，10，20，0)； //顺序为：年、月、日、<br>时、分、秒，年、月、日是必须的</li></ul><ul><li>方法：<br>Date.getDate( ) 返回一个月中的某一天<br>Date.getDay( ) 返回一周中的某一天<br>Date.getFullYear( ) 返回 Date 对象的年份字段<br>Date.getHours( ) 返回 Date 对象的小时字段<br>Date.getMilliseconds( ) 返回 Date 对象的毫秒字段<br>Date.getMinutes( ) 返回 Date 对象的分钟字段<br>Date.getMonth( ) 返回 Date 对象的月份字段<br>Date.getSeconds( ) 返回 Date 对象的秒字段<br>Date.getTime( ) 返回 Date 对象的毫秒表示</li></ul><h3 id="Error-异常对象"><a href="#Error-异常对象" class="headerlink" title="Error 异常对象"></a>Error 异常对象</h3><p>Error.message 可以读取的错误消息<br>Error.name 错误的类型<br>Error.toString( ) 把 Error 对象转换成字符串<br>EvalError 在不正确使用 eval()时抛出<br>SyntaxError 抛出该错误用来通知语法错误<br>RangeError 在数字超出合法范围时抛出<br>ReferenceError 在读取不存在的变量时抛出<br>TypeError 当一个值的类型错误时，抛出该异常<br>URIError 由 URl 的编码和解码方法抛出</p><h3 id="Function-函数构造器"><a href="#Function-函数构造器" class="headerlink" title="Function 函数构造器"></a>Function 函数构造器</h3><p>Function.apply( ) 将函数作为一个对象的方法调用<br>Function.arguments[] 传递给函数的参数<br>Function.call( ) 将函数作为对象的方法调用<br>Function.caller 调用当前函数的函数<br>Function.length 已声明的参数的个数<br>Function.prototype 对象类的原型<br>Function.toString( ) 把函数转换成字符串</p><h3 id="Math-数据对象"><a href="#Math-数据对象" class="headerlink" title="Math 数据对象"></a>Math 数据对象</h3><p>Math 对象是一个静态对象<br>Math.PI 圆周率<br>Math.abs() 绝对值<br>Math.ceil() 向上取整(整数加 1，小数去掉)<br>Math.floor() 向下取整(直接去掉小数)<br>Math.round() 四舍五入<br>Math.pow(x，y) 求 x 的 y 次方<br>Math.sqrt() 求平方根</p><h3 id="number-数值对象"><a href="#number-数值对象" class="headerlink" title="number 数值对象"></a>number 数值对象</h3><p>Number.MAX_VALUE 最大数值<br>Number.MIN_VALUE 最小数值<br>Number.NaN 特殊的非数字值<br>Number.NEGATIVE_INFINITY 负无穷大<br>Number.POSITIVE_INFINITY 正无穷大<br>Number.toExponential( ) 用指数计数法格式化数字<br>Number.toFixed( ) 采用定点计数法格式化数字<br>Number.toLocaleString( ) 把数字转换成本地格式的字符串<br>Number.toPrecision( ) 格式化数字的有效位<br>Number.toString( ) 将—个数字转换成字符串<br>Number.valueOf( ) 返回原始数</p><h3 id="object-基础对象"><a href="#object-基础对象" class="headerlink" title="object 基础对象"></a>object 基础对象</h3><p>Object 含有所有 JavaScript 对象的特性的超类<br>Object.constructor 对象的构造函数<br>Object.hasOwnProperty( ) 检查属性是否被继承<br>Object.isPrototypeOf( ) 一个对象是否是另一个对象的原型<br>Object.propertyIsEnumerable( ) 是否可以通过 for/in 循环看到属性<br>Object.toLocaleString( ) 返回对象的本地字符串表示<br>Object.toString( ) 定义一个对象的字符串表示<br>Object.valueOf( ) 指定对象的原始值</p><h3 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h3><p>RegExp.exec( ) 通用的匹配模式<br>RegExp.global 正则表达式是否全局匹配<br>RegExp.ignoreCase 正则表达式是否区分大小写<br>RegExp.lastIndex 下次匹配的起始位置<br>RegExp.source 正则表达式的文本<br>RegExp.test( ) 检测一个字符串是否匹配某个模式<br>RegExp.toString( ) 把正则表达式转换成字符串</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对象及方法&quot;&gt;&lt;a href=&quot;#对象及方法&quot; class=&quot;headerlink&quot; title=&quot;对象及方法&quot;&gt;&lt;/a&gt;对象及方法&lt;/h3&gt;&lt;p&gt;Arguments 函数参数集合&lt;br&gt;Arguments[ ] 函数参数的数组&lt;br&gt;Arguments 一个函数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>创建对象的几种方式</title>
    <link href="http://coderbxd.top/2021/07/07/js04%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://coderbxd.top/2021/07/07/js04%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-07-07T07:32:24.061Z</published>
    <updated>2021-08-14T12:34:29.637Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象字面量-最简单好用"><a href="#对象字面量-最简单好用" class="headerlink" title="对象字面量{} 最简单好用"></a>对象字面量{} 最简单好用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> Cat = &#123;&#125;;<span class="comment">//JSON</span></span></span><br><span class="line"><span class="javascript">  Cat.name = <span class="string">&quot;kity&quot;</span>;<span class="comment">//添加属性并赋值</span></span></span><br><span class="line">  Cat.age = 2;</span><br><span class="line"><span class="javascript">  Cat.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;hello &quot;</span> + Cat.name + <span class="string">&quot;,今年&quot;</span> + Cat[<span class="string">&quot;age&quot;</span>] + <span class="string">&quot;岁了&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//可以使用“.”的方式访问属性，也可以使用 HashMap 的方式访问</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  Cat.sayHello();<span class="comment">//调用对象的（方法）函数</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用function函数来模拟-class"><a href="#使用function函数来模拟-class" class="headerlink" title="使用function函数来模拟 class"></a>使用function函数来模拟 class</h3><ul><li>创建一个对象，相当于new一个类的实例（无参构造函数）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> personOne = <span class="keyword">new</span> Person();</span></span><br><span class="line"><span class="javascript">  <span class="comment">//定义一个 function，如果有 new 关键字去&quot;实例化&quot;,那么该 function 可以看作是一个类</span></span></span><br><span class="line"><span class="javascript">  personOne.name = <span class="string">&quot;dylan&quot;</span>;</span></span><br><span class="line"><span class="javascript">  personOne.hobby = <span class="string">&quot;coding&quot;</span>;</span></span><br><span class="line"><span class="javascript">  personOne.work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(personOne.name + <span class="string">&quot; is coding now...&quot;</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line">  personOne.work();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以使用有参构造函数来实现，这样定义更方便，扩展性更强（推荐使用）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">name,age,hobby</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.name = name;<span class="comment">//this 作用域：当前对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.age = age;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.hobby = hobby;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&quot;我叫&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;,我喜欢&quot;</span> + <span class="built_in">this</span>.hobby + <span class="string">&quot;,也是个吃货&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> maidou = <span class="keyword">new</span> Pet(<span class="string">&quot;麦兜&quot;</span>,<span class="number">5</span>,<span class="string">&quot;睡觉&quot;</span>);<span class="comment">//实例化/创建对象</span></span></span><br><span class="line"><span class="javascript">  maidou.eat();<span class="comment">//调用 eat 方法(函数)</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用工厂方法（Object关键字）、原型对象方法（prototype）混合模式（原型+构造函数）来创建</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//工厂方法</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> wcDog = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></span><br><span class="line"><span class="javascript">    wcDog.name = <span class="string">&quot;旺财&quot;</span>;</span></span><br><span class="line">    wcDog.age = 3;</span><br><span class="line"><span class="javascript">    wcDog.work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&quot;我是&quot;</span>+wcDog.name+<span class="string">&quot;,汪汪汪......&quot;</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line">  wcDog.work();</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 原型对象</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  Dog.prototype.name = <span class="string">&quot;旺财&quot;</span>;</span></span><br><span class="line"><span class="javascript">  Dog.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="built_in">this</span>.name + <span class="string">&quot;是个吃货&quot;</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> wangcai = <span class="keyword">new</span> Dog();</span></span><br><span class="line">  wangcai.eat();</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 混合模式</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">name,price</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.name=name;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.price=price;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  Car.prototype.sell = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;我是&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;，我现在卖&quot;</span>+<span class="built_in">this</span>.price+<span class="string">&quot;万元&quot;</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> camry = <span class="keyword">new</span> Car(<span class="string">&quot;凯美瑞&quot;</span>,<span class="number">27</span>);</span></span><br><span class="line">  camry.sell();</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 动态原型</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">name,price</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.price = price;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="keyword">typeof</span> Car.sell==<span class="string">&quot;undefined&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">      Car.prototype.sell=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;我是&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;，我现在卖&quot;</span>+<span class="built_in">this</span>.price+<span class="string">&quot;万元&quot;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      Car.sell=<span class="literal">true</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> camry = <span class="keyword">new</span> Car(<span class="string">&quot;凯美瑞&quot;</span>,<span class="number">27</span>);</span></span><br><span class="line">  camry.sell();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对象字面量-最简单好用&quot;&gt;&lt;a href=&quot;#对象字面量-最简单好用&quot; class=&quot;headerlink&quot; title=&quot;对象字面量{} 最简单好用&quot;&gt;&lt;/a&gt;对象字面量{} 最简单好用&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>创建函数的几种方式</title>
    <link href="http://coderbxd.top/2021/07/07/js03%E7%AE%80%E8%BF%B0%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://coderbxd.top/2021/07/07/js03%E7%AE%80%E8%BF%B0%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-07-07T07:23:45.869Z</published>
    <updated>2021-07-07T07:37:58.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方式如下"><a href="#方式如下" class="headerlink" title="方式如下"></a>方式如下</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 函数声明</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">sum1</span>(<span class="params">num1, num2</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> num1 + num2;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 函数表达式</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> sum2 = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> num1 + num2;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 函数对象方式</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> sum3 = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="string">&quot;num1&quot;</span>, <span class="string">&quot;return num1&quot;</span></span>)</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方式如下&quot;&gt;&lt;a href=&quot;#方式如下&quot; class=&quot;headerlink&quot; title=&quot;方式如下&quot;&gt;&lt;/a&gt;方式如下&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何判断数据类型</title>
    <link href="http://coderbxd.top/2021/07/07/js02-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://coderbxd.top/2021/07/07/js02-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-07-07T06:49:38.087Z</published>
    <updated>2021-07-07T07:23:25.586Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型共有七种"><a href="#数据类型共有七种" class="headerlink" title="数据类型共有七种"></a>数据类型共有七种</h3><ul><li>Undefined、Null、Boolean、String、Symbol、Number、Object</li><li>除了Object之外的6种属于原始数据类型。有时，我们还会细分Object的类型，比如Array，<br>Function，Date，RegExp</li></ul><h3 id="判断方法-typeof"><a href="#判断方法-typeof" class="headerlink" title="判断方法 typeof"></a>判断方法 typeof</h3><ul><li>用来区分除了null类型之外的原始数据类型，对象类型可以从普通对象里面识别出函数<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 识别出函数</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &quot;undefined&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &quot;object&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// &quot;number&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> <span class="string">&quot;1&quot;</span> <span class="comment">// &quot;string&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> <span class="built_in">Symbol</span>() <span class="comment">// &quot;symbol&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// &quot;function&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 问题一：typeof不能识别null，如何识别null？</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 可以使用全等运算符来识别</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> a = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">  a === <span class="literal">null</span> <span class="comment">// true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 问题二：typeof作用与未定义的变量 会报错吗？</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> randomVariable <span class="comment">// &quot;undefined&quot;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="comment">// 问题三：typeof Number(1)的返回值是什么</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> <span class="built_in">Number</span>(<span class="number">1</span>) <span class="comment">// &quot;number&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">typeof</span> <span class="built_in">String</span>(<span class="string">&quot;1&quot;</span>) <span class="comment">// &quot;string&quot; Array(1, 2, 3)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 等价于</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>,</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="判断方法-instanceof"><a href="#判断方法-instanceof" class="headerlink" title="判断方法 instanceof"></a>判断方法 instanceof</h3><ul><li><p>不能用于判断原始数据类型的数据 可以用来判断对象的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="number">3</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span> <span class="comment">// false</span></span></span><br><span class="line"><span class="javascript">  <span class="string">&#x27;3&#x27;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// false</span></span></span><br><span class="line"><span class="javascript">  <span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span> <span class="comment">// false</span></span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="comment">// instanceof 可以用来判断对象的类型：</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">  date <span class="keyword">instanceof</span> <span class="built_in">Date</span> <span class="comment">// true</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> number = <span class="keyword">new</span> <span class="built_in">Number</span>()</span></span><br><span class="line"><span class="javascript">  number <span class="keyword">instanceof</span> <span class="built_in">Number</span> <span class="comment">// true</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> string = <span class="keyword">new</span> <span class="built_in">String</span>()</span></span><br><span class="line"><span class="javascript">  string <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以用来判断对象的类型</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据类型共有七种&quot;&gt;&lt;a href=&quot;#数据类型共有七种&quot; class=&quot;headerlink&quot; title=&quot;数据类型共有七种&quot;&gt;&lt;/a&gt;数据类型共有七种&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Undefined、Null、Boolean、String、Symbol、Num</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 的基本类型有哪些？引用类型有哪些？null 和 undefined 的区别？</title>
    <link href="http://coderbxd.top/2021/07/07/js01-js%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <id>http://coderbxd.top/2021/07/07/js01-js%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-07-07T06:45:08.513Z</published>
    <updated>2021-07-07T06:50:16.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>基本数据类型：number, string, boolean, null, undefined</li><li>引用数据类型：function, object, array</li></ul><h3 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h3><ul><li><p>undefined:表示变量声明但未初始化时的值</p></li><li><p>null：表示准备用来保存对象，还没有真正保存对象的值。从逻辑角度看，null 值表示一个<br>空对象指针</p></li><li><p>JavaScript里共有5种基本类型：Undefined, Null, Boolean, Number, String，和一种复杂类型 Object。可以看到 null 和 undefined 分属不同的类型，未初始化定义的值用 typeof 检测出来是”undefined”(字符串)，而 null 值用 typeof 检测出来是”object”（字符串）。任何时候都不建议显式的设置一个变量为 undefined，但是如果保存对象的变量还没有真正保存对象，应该设置成 null。实际上，undefined 值是派生自 null值的，ECMAScript 标准规定对二者进行相等性测试要返回 true</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基本数据类型：number, string, boolean, null, undefined&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BFC</title>
    <link href="http://coderbxd.top/2021/07/07/css09-BFC/"/>
    <id>http://coderbxd.top/2021/07/07/css09-BFC/</id>
    <published>2021-07-07T06:40:25.819Z</published>
    <updated>2021-07-07T06:44:44.899Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，<br>只有 块级盒子 参与，它规定了内部的 块级盒子 如何布局，并且与这个区域外部毫不相干</li></ul><h3 id="布局规则"><a href="#布局规则" class="headerlink" title="布局规则"></a>布局规则</h3><p>1、内部的 Box 会在垂直方向，一个接一个地放置<br>2、Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin<br>会发生重叠<br>3、每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往<br>右的格式化，否则相反)。即使存在浮动也是如此<br>4、BFC 的区域不会与 float box 重叠<br>5、BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反<br>之也如此<br>6、计算 BFC 的高度时，浮动元素也参与计算</p><h3 id="那些元素会生成BFC"><a href="#那些元素会生成BFC" class="headerlink" title="那些元素会生成BFC"></a>那些元素会生成BFC</h3><p>1、根元素<br>2、float 属性不为 none<br>3、position 为 absolute 或 fixed<br>4、display 为 inline-block， table-cell， table-caption， flex， inline-flex<br>5、overflow 不为 visible</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，&lt;br&gt;只有 块级</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>为什么会出现浮动？浮动元素会引起什么问题？如何清除浮动？</title>
    <link href="http://coderbxd.top/2021/07/04/css08-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%B5%AE%E5%8A%A8/"/>
    <id>http://coderbxd.top/2021/07/04/css08-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%B5%AE%E5%8A%A8/</id>
    <published>2021-07-04T08:04:06.690Z</published>
    <updated>2021-07-04T08:16:11.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浮动定位将元素排除在普通流之外，即元素讲脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留"><a href="#浮动定位将元素排除在普通流之外，即元素讲脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留" class="headerlink" title="浮动定位将元素排除在普通流之外，即元素讲脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留"></a>浮动定位将元素排除在普通流之外，即元素讲脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留</h3><h3 id="为什么需要清除浮动"><a href="#为什么需要清除浮动" class="headerlink" title="为什么需要清除浮动"></a>为什么需要清除浮动</h3><ul><li><p>父元素的高度无法被撑开，影响与父元素同级的元素</p></li><li><p>与浮动元素同级的非浮动元素（内联元素）会跟随其后</p></li><li><p>若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构解<br>决方法</p></li></ul><h3 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h3><ul><li><p>使用 CSS 中的 clear:both;（放一个空的 div，并设置上述 css）,属性来清除元素的浮动<br>可解决 2、3 问题</p></li><li><p>对于问题 1，添加如下样式，给父元素添加 clearfix 样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .clearfix:after &#123;</span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .clearfix &#123;</span><br><span class="line"><span class="css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line">  &#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给父级元素设置双伪元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container clearfix&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .clearfix:after&#123;</span><br><span class="line"><span class="css">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>; <span class="comment">/*设置内容为空*/</span></span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>:<span class="number">0</span>; <span class="comment">/*高度为 0*/</span></span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>:<span class="number">0</span>; <span class="comment">/*行高为 0*/</span></span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>:block; <span class="comment">/*将文本转为块级元素*/</span></span></span><br><span class="line"><span class="css">    <span class="attribute">visibility</span>:hidden; <span class="comment">/*将元素隐藏*/</span></span></span><br><span class="line"><span class="css">    <span class="attribute">clear</span>:both; <span class="comment">/*清除浮动*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  .clearfix&#123;</span><br><span class="line"><span class="css">    zoom:<span class="number">1</span>; <span class="comment">/*为了兼容 IE*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给父级元素设置 overflow：hidden；或 overflow：auto；本质是构建一个 BFC</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;浮动定位将元素排除在普通流之外，即元素讲脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留&quot;&gt;&lt;a href=&quot;#浮动定位将元素排除在普通流之外，即元素讲脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="CSS" scheme="http://coderbxd.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>rem布局如何计算HTML根字号及适配方案？</title>
    <link href="http://coderbxd.top/2021/07/04/css07-rem%E5%B8%83%E5%B1%80%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E7%9A%84/"/>
    <id>http://coderbxd.top/2021/07/04/css07-rem%E5%B8%83%E5%B1%80%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E7%9A%84/</id>
    <published>2021-07-04T07:46:07.342Z</published>
    <updated>2021-07-04T08:17:06.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通用方案"><a href="#通用方案" class="headerlink" title="通用方案"></a>通用方案</h3><ul><li><p>设置根 font-size：625%（或其它自定的值，但换算规则 1rem 不能小于 12px）</p></li><li><p>通过媒体查询分别设置每个屏幕的根 font-size</p></li><li><p>CSS 直接除以 2 再除以 100 即可换算为 rem</p></li></ul><p>优：有一定适用性，换算也较为简单</p><p>劣：有兼容性的坑，对不同手机适配不是非常精准；需要设置多个媒体查询来适应不同<br>手机，单某款手机尺寸不在设置范围之内，会导致无法适配</p><h3 id="网易方案"><a href="#网易方案" class="headerlink" title="网易方案"></a>网易方案</h3><ul><li><p>拿到设计稿除以 100，得到宽度 rem 值</p></li><li><p>通过给 html 的 style 设置 font-size，把 1 里面得到的宽度 rem 值代入</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  x <span class="built_in">document</span>.documentElement.style.fontSize =</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.documentElement.clientWidth / x + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设计稿 px/100 即可换算为 rem</li></ul><p>优：通过动态根 font-size 来做适配，基本无兼容性问题，适配较为精准，换算简便</p><p>劣：无 viewport 缩放，且针对 iPhone 的 Retina 屏没有做适配，导致对一些手机的适<br>配不是很到位</p><h3 id="手淘方案"><a href="#手淘方案" class="headerlink" title="手淘方案"></a>手淘方案</h3><ul><li><p>拿到设计稿除以 10，得到 font-size 基准值</p></li><li><p>引入 flexible</p></li><li><p>不要设置 meta 的 viewport 缩放值</p></li><li><p>设计稿 px/ font-size 基准值，即可换算为 rem</p></li></ul><p>优：通过动态根 font-size、viewpor、dpr 来做适配，无兼容性问题，适配精准。</p><p>劣：需要根据设计稿进行基准值换算，在不使用 sublime text 编辑器插件开发时，单<br>位计算复杂</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;通用方案&quot;&gt;&lt;a href=&quot;#通用方案&quot; class=&quot;headerlink&quot; title=&quot;通用方案&quot;&gt;&lt;/a&gt;通用方案&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置根 font-size：625%（或其它自定的值，但换算规则 1rem 不能小于 12px）&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="CSS" scheme="http://coderbxd.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>px,em,rem的区别</title>
    <link href="http://coderbxd.top/2021/07/03/css06-px,em,rem%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://coderbxd.top/2021/07/03/css06-px,em,rem%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-07-03T09:01:07.125Z</published>
    <updated>2021-07-03T09:23:03.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="px-em-rem的区别"><a href="#px-em-rem的区别" class="headerlink" title="px,em,rem的区别"></a>px,em,rem的区别</h3><ul><li><p>px </p><ul><li>px 像素 绝对单位。像素 px 是相对于显示器屏幕分辨率而言的，是一<br>个虚拟长度单位，是计算机系统的数字化图像长度单位</li></ul></li><li><p>em </p><ul><li>em是相对长度单位，相对于当前对象内文本的字体尺寸。如当前对行内文本的字<br>体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。它会继承父级元素的字体大<br>小，因此并不是一个固定的值</li></ul></li><li><p>rem </p><ul><li>rem是CSS3 新增的一个相对单位（root em，根 em），使用 rem 为元素设定字<br>体大小时，仍然是相对大小，但相对的只是 HTML 根元素</li></ul></li><li><p>区别<br>IE 无法调整那些使用 px 作为单位的字体大小，而 em 和 rem 可以缩放，rem<br>相对的只是 HTML 根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通<br>过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐<br>层复合的连锁反应。目前，除了 IE8 及更早版本外，所有浏览器均已支持rem</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;px-em-rem的区别&quot;&gt;&lt;a href=&quot;#px-em-rem的区别&quot; class=&quot;headerlink&quot; title=&quot;px,em,rem的区别&quot;&gt;&lt;/a&gt;px,em,rem的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;px &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;px 像</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="CSS" scheme="http://coderbxd.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css中那些属性可继承，哪些不可以？</title>
    <link href="http://coderbxd.top/2021/07/03/css05-%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <id>http://coderbxd.top/2021/07/03/css05-%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%9A%84%E5%B1%9E%E6%80%A7/</id>
    <published>2021-07-03T08:49:09.605Z</published>
    <updated>2021-07-03T09:00:46.597Z</updated>
    
    <content type="html"><![CDATA[<h3 id="能继承的属性"><a href="#能继承的属性" class="headerlink" title="能继承的属性"></a>能继承的属性</h3><ul><li>字体系列属性<ul><li>font</li></ul></li><li>文本系列属性<ul><li>内联元素：color, line-height, word-spacing, letter-spacing, text-transform</li><li>块级元素：text-indent, text-align</li></ul></li><li>元素可见性<ul><li>visiblity</li></ul></li><li>表格布局属性<ul><li>caption-side, border-collapse, border-spacing, empty-cells, table-layout</li></ul></li><li>列表布局属性<ul><li>list-style</li></ul></li></ul><h3 id="不能继承的属性"><a href="#不能继承的属性" class="headerlink" title="不能继承的属性"></a>不能继承的属性</h3><ul><li>display<ul><li>规定元素应该生成的框的类型</li></ul></li><li>文本属性<ul><li>vertical-align, text-decoration</li></ul></li><li>盒子模型的模型<ul><li>width, height, margin, border, padding</li></ul></li><li>背景属性<ul><li>background, background-image, background-color</li></ul></li><li>定位属性<ul><li>float, clear, position, top, right, bottom, left, min-width, min-height<br>, max-width, max-height, overflow, clip</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;能继承的属性&quot;&gt;&lt;a href=&quot;#能继承的属性&quot; class=&quot;headerlink&quot; title=&quot;能继承的属性&quot;&gt;&lt;/a&gt;能继承的属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;字体系列属性&lt;ul&gt;
&lt;li&gt;font&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文本系列属性&lt;</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="CSS" scheme="http://coderbxd.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>input元素type属性值</title>
    <link href="http://coderbxd.top/2021/07/03/html02-h5input%E5%85%83%E7%B4%A0type%E5%80%BC/"/>
    <id>http://coderbxd.top/2021/07/03/html02-h5input%E5%85%83%E7%B4%A0type%E5%80%BC/</id>
    <published>2021-07-03T08:14:35.843Z</published>
    <updated>2021-07-03T09:09:30.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="H5-input元素type属性值"><a href="#H5-input元素type属性值" class="headerlink" title="H5 input元素type属性值"></a>H5 input元素type属性值</h3><ul><li>button 按钮</li><li>checkout 复选框</li><li>color 颜色</li><li>date 定义日期字段</li><li>month 定义日期字段的月</li><li>time 日期字段的时、分、秒</li><li>email 定义用于 e-mail地址的文本字段</li><li>file 定义输入字段和”浏览…” 按钮，供文件上传</li><li>hidden 隐藏输入字段</li><li>image 定义图像作为提交按钮</li><li>number 定义带有 spinner 控件的数字字段</li><li>password 定义密码字段。字段中的字符会被遮蔽。</li><li>radio 定义单选按钮。</li><li>search 定义用于搜索的文本字段。</li><li>submit 定义提交按钮。提交按钮向服务器发送数据。</li><li>text 默认。定义单行输入字段，用户可在其中输入文本。默认是 20 个字符。</li><li>url 定义用于 URL 的文本字段。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;H5-input元素type属性值&quot;&gt;&lt;a href=&quot;#H5-input元素type属性值&quot; class=&quot;headerlink&quot; title=&quot;H5 input元素type属性值&quot;&gt;&lt;/a&gt;H5 input元素type属性值&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;butt</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="HTML" scheme="http://coderbxd.top/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>css选择器优先级</title>
    <link href="http://coderbxd.top/2021/07/03/css04-css%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://coderbxd.top/2021/07/03/css04-css%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2021-07-03T06:49:51.859Z</published>
    <updated>2021-07-03T08:15:18.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><ul><li>!important &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</li><li>权重 <ul><li>css权重是由四个数值决定</li><li>第一等：内联样式：style = “”, 权值1000 不推荐使用，不利于管理</li><li>第二等：ID选择器：#header，权值100</li><li>第三等： 类，伪类，属性选择器：.bar，权值10</li><li>第四等：标签，伪元素选择器：div::first-line，权值1</li><li>将所有值相加就是当前元素的权重</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;权重&quot;&gt;&lt;a href=&quot;#权重&quot; class=&quot;headerlink&quot; title=&quot;权重&quot;&gt;&lt;/a&gt;权重&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;!important &amp;gt; 行内样式 &amp;gt; ID选择器 &amp;gt; 类选择器 &amp;gt; 标签 &amp;gt; 通配符 &amp;gt; </summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="CSS" scheme="http://coderbxd.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css盒模型</title>
    <link href="http://coderbxd.top/2021/07/03/css03-%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <id>http://coderbxd.top/2021/07/03/css03-%E7%9B%92%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-07-03T06:30:49.724Z</published>
    <updated>2021-07-03T06:49:36.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="盒子模型可以用来对元素进行布局，包括内边距，边框，外边距和实际内容"><a href="#盒子模型可以用来对元素进行布局，包括内边距，边框，外边距和实际内容" class="headerlink" title="盒子模型可以用来对元素进行布局，包括内边距，边框，外边距和实际内容"></a>盒子模型可以用来对元素进行布局，包括内边距，边框，外边距和实际内容</h3><h3 id="盒子模型分为两种"><a href="#盒子模型分为两种" class="headerlink" title="盒子模型分为两种"></a>盒子模型分为两种</h3><ul><li>W3C 标准的盒子模型（标准盒模型）</li><li>IE 标准的盒子模型（怪异盒模型）</li></ul><h3 id="标准盒模型与怪异盒模型的表现效果的区别之处"><a href="#标准盒模型与怪异盒模型的表现效果的区别之处" class="headerlink" title="标准盒模型与怪异盒模型的表现效果的区别之处"></a>标准盒模型与怪异盒模型的表现效果的区别之处</h3><ul><li>标准盒模型的盒子大小 = content + border + padding + margin </li><li>怪异盒模型的盒子大小 = width(content + border + padding) + margin</li></ul><h3 id="可以通过属性box-sizing-来设置盒子模型的解析模式"><a href="#可以通过属性box-sizing-来设置盒子模型的解析模式" class="headerlink" title="可以通过属性box-sizing 来设置盒子模型的解析模式"></a>可以通过属性box-sizing 来设置盒子模型的解析模式</h3><ul><li>box-sizing: content-box; (默认值),border和padding不算在宽度内<br>是W3C的标准模型 总宽 = width + padding + border + margin</li><li>box-sizing: border-box; border和padding计算在宽度里，可以理解是怪异模型<br>总宽 = width + margin</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;盒子模型可以用来对元素进行布局，包括内边距，边框，外边距和实际内容&quot;&gt;&lt;a href=&quot;#盒子模型可以用来对元素进行布局，包括内边距，边框，外边距和实际内容&quot; class=&quot;headerlink&quot; title=&quot;盒子模型可以用来对元素进行布局，包括内边距，边框，外</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="CSS" scheme="http://coderbxd.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>三栏布局--双飞翼布局（圣杯布局）</title>
    <link href="http://coderbxd.top/2021/07/03/css02-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80(%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80)/"/>
    <id>http://coderbxd.top/2021/07/03/css02-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80(%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80)/</id>
    <published>2021-07-03T06:09:18.753Z</published>
    <updated>2021-07-03T06:30:35.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用定位实现两侧固定中间自适应"><a href="#利用定位实现两侧固定中间自适应" class="headerlink" title="利用定位实现两侧固定中间自适应"></a>利用定位实现两侧固定中间自适应</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.father &#123;</span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">200px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.left,.right &#123;</span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line"><span class="css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line"><span class="css">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">350px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html 结构 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用flex布局实现两侧固定中间自适应"><a href="#利用flex布局实现两侧固定中间自适应" class="headerlink" title="利用flex布局实现两侧固定中间自适应"></a>利用flex布局实现两侧固定中间自适应</h3><ul><li>父盒子设置display: flex;</li><li>左右盒子设置固定高度</li><li>中间盒子设置固定宽高</li><li>中间盒子设置flex: 1;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.father &#123;</span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line"><span class="css">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用BFC块级格式化上下文，实现两侧固定中间自适应"><a href="#使用BFC块级格式化上下文，实现两侧固定中间自适应" class="headerlink" title="使用BFC块级格式化上下文，实现两侧固定中间自适应"></a>使用BFC块级格式化上下文，实现两侧固定中间自适应</h3><ul><li>左右固定宽高，进行浮动</li><li>中间 overflow: hidden;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.father &#123;</span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: pink;</span></span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line"><span class="css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line"><span class="css">  <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">450px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html 结构 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- left和right必须在center前面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;利用定位实现两侧固定中间自适应&quot;&gt;&lt;a href=&quot;#利用定位实现两侧固定中间自适应&quot; class=&quot;headerlink&quot; title=&quot;利用定位实现两侧固定中间自适应&quot;&gt;&lt;/a&gt;利用定位实现两侧固定中间自适应&lt;/h3&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="CSS" scheme="http://coderbxd.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>如何实现盒子水平垂直居中</title>
    <link href="http://coderbxd.top/2021/07/03/css01-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9B%92%E5%AD%90%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>http://coderbxd.top/2021/07/03/css01-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9B%92%E5%AD%90%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</id>
    <published>2021-07-03T05:45:54.566Z</published>
    <updated>2021-07-03T06:05:10.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法一-利用定位"><a href="#方法一-利用定位" class="headerlink" title="方法一 利用定位"></a>方法一 利用定位</h3><ul><li>核心代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .child &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法二-利用margin-auto"><a href="#方法二-利用margin-auto" class="headerlink" title="方法二 利用margin:auto"></a>方法二 利用margin:auto</h3><ul><li>核心代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    weight: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .child &#123;</span><br><span class="line"><span class="css">    weight: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法三-利用display-table-cell"><a href="#方法三-利用display-table-cell" class="headerlink" title="方法三 利用display: table-cell;"></a>方法三 利用display: table-cell;</h3><ul><li>核心代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    weight: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="css">    <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .child &#123;</span><br><span class="line"><span class="css">    weight: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: inline-block</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法四-利用display-flex"><a href="#方法四-利用display-flex" class="headerlink" title="方法四 利用display: flex;"></a>方法四 利用display: flex;</h3><ul><li>核心代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    weight: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .child &#123;</span><br><span class="line"><span class="css">    weight: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法五-利用transform"><a href="#方法五-利用transform" class="headerlink" title="方法五 利用transform"></a>方法五 利用transform</h3><ul><li>核心代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    weight: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .child &#123;</span><br><span class="line"><span class="css">    weight: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">    <span class="comment">/* 不用计算宽高 */</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方法一-利用定位&quot;&gt;&lt;a href=&quot;#方法一-利用定位&quot; class=&quot;headerlink&quot; title=&quot;方法一 利用定位&quot;&gt;&lt;/a&gt;方法一 利用定位&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;核心代码&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="CSS" scheme="http://coderbxd.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>浏览器输入网址到页面渲染全过程</title>
    <link href="http://coderbxd.top/2021/07/02/%E6%B5%8F%E8%A7%88%E5%99%A807-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://coderbxd.top/2021/07/02/%E6%B5%8F%E8%A7%88%E5%99%A807-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E5%85%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2021-07-02T07:15:28.371Z</published>
    <updated>2021-07-02T07:16:41.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输入URL到页面加载显示完成发生了什么"><a href="#输入URL到页面加载显示完成发生了什么" class="headerlink" title="输入URL到页面加载显示完成发生了什么"></a>输入URL到页面加载显示完成发生了什么</h3><ul><li><p>DNS解析</p></li><li><p>TCP连接</p></li><li><p>发送HTTP请求</p></li><li><p>服务器处理请求并返回HTTP报文</p></li><li><p>浏览器解析渲染页面</p></li><li><p>连接结束</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;输入URL到页面加载显示完成发生了什么&quot;&gt;&lt;a href=&quot;#输入URL到页面加载显示完成发生了什么&quot; class=&quot;headerlink&quot; title=&quot;输入URL到页面加载显示完成发生了什么&quot;&gt;&lt;/a&gt;输入URL到页面加载显示完成发生了什么&lt;/h3&gt;&lt;ul&gt;
</summary>
      
    
    
    
    
    <category term="浏览器" scheme="http://coderbxd.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>csrf和xss</title>
    <link href="http://coderbxd.top/2021/07/02/%E6%B5%8F%E8%A7%88%E5%99%A806-xss%E5%92%8Ccsrf/"/>
    <id>http://coderbxd.top/2021/07/02/%E6%B5%8F%E8%A7%88%E5%99%A806-xss%E5%92%8Ccsrf/</id>
    <published>2021-07-02T07:11:19.095Z</published>
    <updated>2021-07-02T07:14:34.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="csrf和xss的网络攻击及防范"><a href="#csrf和xss的网络攻击及防范" class="headerlink" title="csrf和xss的网络攻击及防范"></a>csrf和xss的网络攻击及防范</h3><ul><li><p>CSRF：跨站请求伪造，可以理解为攻击者盗用了用户的身份，以用户的名义发送了恶意请求，比如用户登录了一个网站后，立刻在另一个ｔａｂ页面访问量攻击者用来制造攻击的网站，这个网站要求访问刚刚登陆的网站，并发送了一个恶意请求，这时候CSRF就产生了，比如这个制造攻击的网站使用一张图片，但是这种图片的链接却是可以修改数据库的，这时候攻击者就可以以用户的名义操作这个数据库</p><ul><li>防御CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</li></ul></li><li><p>XSS：跨站脚本攻击，是说攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，比如获取cookie，或者其他用户身份信息，可以分为存储型和反射型，存储型是攻击者输入一些数据并且存储到了数据库中，其他浏览者看到的时候进行攻击，反射型的话不存储在数据库中，往往表现为将攻击代码放在url地址的请求参数中  </p><ul><li>防御xss cookie设置httpOnly属性，对用户的输入进行检查，进行特殊字符过滤</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;csrf和xss的网络攻击及防范&quot;&gt;&lt;a href=&quot;#csrf和xss的网络攻击及防范&quot; class=&quot;headerlink&quot; title=&quot;csrf和xss的网络攻击及防范&quot;&gt;&lt;/a&gt;csrf和xss的网络攻击及防范&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSRF：</summary>
      
    
    
    
    
    <category term="浏览器" scheme="http://coderbxd.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>HTML5新增属性</title>
    <link href="http://coderbxd.top/2021/07/02/html01-HTML5%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7/"/>
    <id>http://coderbxd.top/2021/07/02/html01-HTML5%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7/</id>
    <published>2021-07-02T07:07:43.079Z</published>
    <updated>2021-07-02T07:09:00.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML5新增元素"><a href="#HTML5新增元素" class="headerlink" title="HTML5新增元素"></a>HTML5新增元素</h3><ul><li><p>首先html5为了更好的实践web语义化，增加了header，footer，nav,aside,section等语义化标签</p></li><li><p>在表单方面，为了增强表单，为input增加了color，emial,data ,range等类型</p></li><li><p>在存储方面，提供了sessionStorage，localStorage,和离线存储，通过这些存储方式方便数据在客户端的存储和获取</p></li><li><p>在多媒体方面规定了音频和视频元素audio和vedio，另外还有地理定位，canvas画布，拖放，多线程编程的web worker和websocket协议</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;HTML5新增元素&quot;&gt;&lt;a href=&quot;#HTML5新增元素&quot; class=&quot;headerlink&quot; title=&quot;HTML5新增元素&quot;&gt;&lt;/a&gt;HTML5新增元素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先html5为了更好的实践web语义化，增加了header，fo</summary>
      
    
    
    
    
    <category term="面试高频" scheme="http://coderbxd.top/tags/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91/"/>
    
    <category term="HTML" scheme="http://coderbxd.top/tags/HTML/"/>
    
  </entry>
  
</feed>
